geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Popularity of Artists",
x = "Artist Name",
y = "Popularity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(bar_plot)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(data, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- data.frame(
track_id = 1:10,
artists = sample(c("Artist1", "Artist2", "Artist3"), 10, replace = TRUE),
album_name = sample(c("Album1", "Album2", "Album3"), 10, replace = TRUE),
track_name = sample(c("Track1", "Track2", "Track3"), 10, replace = TRUE),
popularity = sample(0:100, 10, replace = TRUE),
duration_ms = sample(200000:300000, 10, replace = TRUE),
explicit = sample(c(TRUE, FALSE), 10, replace = TRUE),
danceability = runif(10, 0, 1),
energy = runif(10, 0, 1),
key = sample(0:11, 10, replace = TRUE),
loudness = runif(10, -50, 5),
mode = sample(0:1, 10, replace = TRUE),
speechiness = runif(10, 0, 1),
acousticness = runif(10, 0, 1),
instrumentalness = runif(10, 0, 1),
liveness = runif(10, 0, 1),
valence = runif(10, 0, 1),
tempo = runif(10, 0, 243),
time_signature = sample(3:5, 10, replace = TRUE),
track_genre = sample(c("Genre1", "Genre2", "Genre3"), 10, replace = TRUE)
)
# View the first few rows of the data frame
head(data)
# Group by track_genre and artists
grouped_data <- data %>%
group_by(track_genre, artists)
# Summarize the grouped data to see the results
summary_data <- grouped_data %>%
summarize(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_duration = mean(duration_ms, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_loudness = mean(loudness, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE),
track_count = n()
)
# View the summarized data
print(summary_data)
View(summary_data)
View(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
# View the first few rows of the data frame
head(data)
# Group by track_genre and artists
grouped_data <- data %>%
group_by(track_genre, artists)
# Summarize the grouped data to see the results
summary_data <- grouped_data %>%
summarize(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_duration = mean(duration_ms, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_loudness = mean(loudness, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE),
track_count = n()
)
# View the summarized data
print(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
# View the first few rows of the data frame
head(data)
# Group by track_genre and artists
grouped_data <- data %>%
group_by(track_genre, artists)
# Summarize the grouped data to see the results
summary_data <- grouped_data %>%
summarize(
avg_popularity = mean(popularity, na.rm = TRUE),
avg_duration = mean(duration_ms, na.rm = TRUE),
avg_danceability = mean(danceability, na.rm = TRUE),
avg_energy = mean(energy, na.rm = TRUE),
avg_loudness = mean(loudness, na.rm = TRUE),
avg_tempo = mean(tempo, na.rm = TRUE),
track_count = n()
)
# View the summarized data
print(summary_data)
View(summary_data)
View(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round(mean(popularity, na.rm = TRUE), 2),
avg_duration_min = round(mean(duration_ms, na.rm = TRUE) / 60000, 2),
avg_danceability = round(mean(danceability, na.rm = TRUE), 2),
avg_energy = round(mean(energy, na.rm = TRUE), 2),
avg_loudness = round(mean(loudness, na.rm = TRUE), 2),
avg_tempo = round(mean(tempo, na.rm = TRUE), 2),
track_count = n()
) %>%
arrange(desc(avg_popularity))
print(summary_data)
View(summary_data)
View(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round_values(mean(popularity, na.rm = TRUE)),
avg_duration_min = round_values(mean(duration_ms, na.rm = TRUE) / 60000),
avg_danceability = round_values(mean(danceability, na.rm = TRUE)),
avg_energy = round_values(mean(energy, na.rm = TRUE)),
avg_loudness = round_values(mean(loudness, na.rm = TRUE)),
avg_tempo = round_values(mean(tempo, na.rm = TRUE)),
track_count = n()
) %>%
arrange(desc(avg_popularity))
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round_values(mean(popularity, na.rm = TRUE)),
avg_duration_min = round_values(mean(duration_ms, na.rm = TRUE) / 60000),
avg_danceability = round_values(mean(danceability, na.rm = TRUE)),
avg_energy = round_values(mean(energy, na.rm = TRUE)),
avg_loudness = round_values(mean(loudness, na.rm = TRUE)),
avg_tempo = round_values(mean(tempo, na.rm = TRUE)),
track_count = n()
) %>%
arrange(desc(avg_popularity))
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round(mean(popularity, na.rm = TRUE), 2),
avg_duration_min = round(mean(duration_ms, na.rm = TRUE) / 60000, 2),
avg_danceability = round(mean(danceability, na.rm = TRUE), 2),
avg_energy = round(mean(energy, na.rm = TRUE), 2),
avg_loudness = round(mean(loudness, na.rm = TRUE), 2),
avg_tempo = round(mean(tempo, na.rm = TRUE), 2),
track_count = n()
) %>%
arrange(desc(avg_popularity))
print(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round(mean(popularity, na.rm = TRUE), 2),
avg_duration_min = round (mean(duration_ms, na.rm = TRUE) / 60000, 2),
avg_danceability = round(mean(danceability, na.rm = TRUE), 2),
avg_energy = round(mean(energy, na.rm = TRUE), 2),
avg_loudness = round(mean(loudness, na.rm = TRUE), 2),
avg_tempo = round(mean(tempo, na.rm = TRUE), 2),
track_count = n()
) %>%
arrange(desc(avg_popularity))
print(summary_data)
View(summary_data)
View(summary_data)
# Install dplyr package if not already installed
if(!require(dplyr)) {
install.packages("dplyr")
}
# Load the dplyr package
library(dplyr)
# Create a sample data frame
data <- read.csv("dataset.csv")
summary_data <- data %>%
group_by(track_genre) %>%
summarize(
avg_popularity = round(mean(popularity, na.rm = TRUE), 0),
avg_duration_min = round (mean(duration_ms, na.rm = TRUE) / 60000, 0),
avg_danceability = round(mean(danceability, na.rm = TRUE), 0),
avg_energy = round(mean(energy, na.rm = TRUE), 0),
avg_loudness = round(mean(loudness, na.rm = TRUE), 0),
avg_tempo = round(mean(tempo, na.rm = TRUE), 0),
track_count = n()
) %>%
arrange(desc(avg_popularity))
print(summary_data)
View(summary_data)
View(summary_data)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
library(readr)
library(ggplot2)
if(!require(tidyverse)) {
install.packages("tidyverse")
}
library(tidyverse)
dataset <- read.csv("dataset.csv")
scatter_plot <- ggplot(data, aes(x = danceability, y = popularity, color = track_genre)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatter Plot of Danceability vs Popularity",
x = "Danceability",
y = "Popularity",
color = "Track Genre") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.position = "bottom"
) +
scale_color_brewer(palette = "Set1")
# Display the plot
print(scatter_plot)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
# Create scatter plot
scatter_plot <- ggplot(data, aes(x = danceability, y = popularity, color = track_genre)) +
geom_point(size = 3, alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", color = "black") + # Add trend line
labs(
title = "Relationship Between Danceability and Popularity of Tracks",
subtitle = "Analyzing how danceability impacts track popularity across different genres",
x = "Danceability",
y = "Popularity",
color = "Track Genre"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
) +
scale_color_brewer(palette = "Set1") +
annotate("text", x = 0.8, y = 90, label = "High danceability\nwith high popularity", size = 4, color = "blue") +
annotate("text", x = 0.2, y = 10, label = "Low danceability\nwith low popularity", size = 4, color = "red")
# Display the plot
print(scatter_plot)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
# Create scatter plot
scatter_plot <- ggplot(data, aes(x = danceability, y = popularity, color = track_genre)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatter Plot of Danceability vs Popularity",
x = "Danceability",
y = "Popularity",
color = "Track Genre") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.position = "bottom"
) +
scale_color_brewer(palette = "Set1")
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
) +
scale_color_brewer(palette = "Set1") +
annotate("text", x = 0.8, y = 90, label = "High danceability\nwith high popularity", size = 4, color = "blue") +
annotate("text", x = 0.2, y = 10, label = "Low danceability\nwith low popularity", size = 4, color = "red")
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
# Create scatter plot
scatter_plot <- ggplot(data, aes(x = danceability, y = popularity, color = track_genre)) +
geom_point(size = 3, alpha = 0.7) +
labs(title = "Scatter Plot of Danceability vs Popularity",
x = "Danceability",
y = "Popularity",
color = "Track Genre") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
legend.position = "bottom"
) +
scale_color_brewer(palette = "Set1")
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
scale_color_brewer(palette = "Set1") +
annotate("text", x = 0.8, y = 90, label = "High danceability\nwith high popularity", size = 4, color = "blue") +
annotate("text", x = 0.2, y = 10, label = "Low danceability\nwith low popularity", size = 4, color = "red")
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
# Create a basic scatter plot
ggplot(
data = iris,
aes(x = danceability, y = energy, color = Species)) +
geom_point() +
labs(title = "Sepal Length vs. Sepal Width by Species",
x = "Sepal Length",
y = "Sepal Width") +
theme_minimal()
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy, color = Species)) +
geom_point() +
labs(title = "Sepal Length vs. Sepal Width by Species",
x = "Sepal Length",
y = "Sepal Width") +
theme_minimal()
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy, color = Species)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy, color = Species)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
# Purpose - The graph helps indentify the relationship between the two variables Energy and Danceability. It helps us visualize the common percpetion that higher energy songs are like to have high danceability
# Insights - We see from the graph that there seems to be
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
print (ggplot)
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
# Create a basic scatter plot
ggplot(
data = dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
print (ggplot)
# Purpose - The graph helps indentify the relationship between the two variables Energy and Danceability. It helps us visualize the common percpetion that higher energy songs are like to have high danceability
# Insights - We see from the graph that there seems to be
library(readr)
library(ggplot2)
dataset <- read.csv("dataset.csv")
ggplot(dataset, aes(x = danceability, y = energy)) +
geom_point() +
labs(title = "Danceability vs. Energy",
x = "Danceability", y = "Energy")
print (ggplot)
# Purpose - The graph helps identify the relationship between the two variables Energy and Danceability. It helps us visualize the common perception that higher energy songs are like to have high danceability. Since both the variable are numbers using a scatter plot also helps understadn the relationship much better
# Insights - We see from the graph that there seems to be a positive relationship between the two variables. Though we see a lot of data crowded between 0.25-0.75 of the dancebility we can assume they fall in the normal bell shaped curves. We may conclude that most of the songs have a good energy hence resulting in danceability. But we may also say that due to the song having high danceability people assume it to have high energy. Hence, we know they share a positive relationship but we cannot assume one cause the other since there are several factors that contribute into this relationship.
install.packages(c("Rcpp", "readr"))
install.packages('dplyr')
install.packages("ggplot2")
install.packages("tidyverse")
# Load the necessary libraries
library(dplyr)
library(ggplot2)
library(readr)
library(tidyverse)
dataset <- read.csv("Desktop/info 201/exploratory-analysis-Rvardar/dataset.csv")
install.packages("ggplot2")
install.packages("dplyr")
# Load the necessary libraries
library(dplyr)
library(ggplot2)
library(readr)
library(tidyverse)
dataset <- read.csv("Desktop/info 201/exploratory-analysis-Rvardar/dataset.csv")
avg_popularity <- aggregate(popularity ~ track_genre, data = dataset, FUN = mean)
# New aggregation to sum up popularity if track_genre is the same
sum_popularity <- dataset %>%
group_by(track_genre) %>%
summarise(total_popularity = sum(popularity))
# Combine both aggregations
combined_popularity <- left_join(avg_popularity, sum_popularity, by = "track_genre")
# Step 4: Create the bar chart using ggplot2
ggplot(combined_popularity, aes(y = track_genre, x = popularity)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) + # Adjust width for space between bars
geom_text(aes(label = track_genre), position = position_dodge(width = 0.7), vjust = -0.2, color = "black", size = 3) +  # Add text labels for total popularity
theme_minimal() +
labs(title = "Average and Total Popularity by Genre",
y = "Genre",
x = "Popularity")
#Purpose - We decided to use a bar graph for the depiction between genre and popularity as it helps in to comparing different groups or track changes over time. It explains the complex data and gives us an overview of what type of music is the most popular.
